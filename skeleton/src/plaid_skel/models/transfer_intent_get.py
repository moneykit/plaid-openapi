# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date as date_  # noqa: F401
from datetime import datetime as datetime_  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from plaid_skel.models.ach_class import ACHClass
from plaid_skel.models.transfer_authorization_decision_rationale import TransferAuthorizationDecisionRationale
from plaid_skel.models.transfer_authorization_guarantee_decision import TransferAuthorizationGuaranteeDecision
from plaid_skel.models.transfer_authorization_guarantee_decision_rationale import TransferAuthorizationGuaranteeDecisionRationale
from plaid_skel.models.transfer_intent_authorization_decision import TransferIntentAuthorizationDecision
from plaid_skel.models.transfer_intent_create_mode import TransferIntentCreateMode
from plaid_skel.models.transfer_intent_create_network import TransferIntentCreateNetwork
from plaid_skel.models.transfer_intent_get_failure_reason import TransferIntentGetFailureReason
from plaid_skel.models.transfer_intent_status import TransferIntentStatus
from plaid_skel.models.transfer_user_in_response import TransferUserInResponse




class TransferIntentGet(BaseModel):
    """Represents a transfer intent within Transfer UI."""


    id: str = Field( description="Plaid's unique identifier for a transfer intent object.")
    created: datetime_ = Field( description="The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.")
    status: TransferIntentStatus = Field()
    transfer_id: Optional[str] = Field(default=None, description="Plaid's unique identifier for the transfer created through the UI. Returned only if the transfer was successfully created. Null value otherwise.")
    failure_reason: Optional[TransferIntentGetFailureReason] = Field(default=None,)
    authorization_decision: Optional[TransferIntentAuthorizationDecision] = Field(default=None,)
    authorization_decision_rationale: Optional[TransferAuthorizationDecisionRationale] = Field(default=None,)
    account_id: Optional[str] = Field(default=None, description="The Plaid `account_id` for the account that will be debited or credited. Returned only if `account_id` was set on intent creation.")
    origination_account_id: str = Field( description="Plaidâ€™s unique identifier for the origination account used for the transfer.")
    funding_account_id: str = Field( description="The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.")
    amount: str = Field( description="The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").")
    mode: TransferIntentCreateMode = Field()
    network: Optional[TransferIntentCreateNetwork] = Field(default=None,)
    ach_class: Optional[ACHClass] = Field(default=None,)
    user: TransferUserInResponse = Field()
    description: str = Field( description="A description for the underlying transfer. Maximum of 8 characters.")
    metadata: Optional[Dict[str, str]] = Field(default=None, description="The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters ")
    iso_currency_code: str = Field( description="The currency of the transfer amount, e.g. \"USD\"")
    require_guarantee: Optional[bool] = Field(default=None, description="When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only).")
    guarantee_decision: Optional[TransferAuthorizationGuaranteeDecision] = Field(default=None,)
    guarantee_decision_rationale: Optional[TransferAuthorizationGuaranteeDecisionRationale] = Field(default=None,)

TransferIntentGet.update_forward_refs()
