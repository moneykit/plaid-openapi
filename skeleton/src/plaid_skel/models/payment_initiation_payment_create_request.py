# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic.v1 import field_validator, AnyUrl, BaseModel, EmailStr, Field  # noqa: F401
from plaid_skel.models.external_payment_options import ExternalPaymentOptions
from plaid_skel.models.external_payment_schedule_request import ExternalPaymentScheduleRequest
from plaid_skel.models.payment_amount import PaymentAmount




class PaymentInitiationPaymentCreateRequest(BaseModel):
    """PaymentInitiationPaymentCreateRequest defines the request schema for `/payment_initiation/payment/create`"""


    client_id: Optional[str] = Field(default=None, description="Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.")
    secret: Optional[str] = Field(default=None, description="Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.")
    recipient_id: str = Field( description="The ID of the recipient the payment is for.")
    reference: str = Field( description="A reference for the payment. This must be an alphanumeric string with at most 18 characters and must not contain any special characters (since not all institutions support them). In order to track settlement via Payment Confirmation, each payment must have a unique reference. If the reference provided through the API is not unique, Plaid will adjust it. Both the originally provided and automatically adjusted references (if any) can be found in the `reference` and `adjusted_reference` fields, respectively.")
    amount: PaymentAmount = Field()
    schedule: Optional[ExternalPaymentScheduleRequest] = Field(default=None,)
    options: Optional[ExternalPaymentOptions] = Field(default=None,)

    @field_validator("reference")
    @classmethod
    def reference_min_length(cls, value):
        assert len(value) >= 1
        return value

    @field_validator("reference")
    @classmethod
    def reference_max_length(cls, value):
        assert len(value) <= 18
        return value

PaymentInitiationPaymentCreateRequest.update_forward_refs()
