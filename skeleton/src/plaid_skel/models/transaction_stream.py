# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date as date_  # noqa: F401
from datetime import datetime as datetime_  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from plaid_skel.models.personal_finance_category import PersonalFinanceCategory
from plaid_skel.models.recurring_transaction_frequency import RecurringTransactionFrequency
from plaid_skel.models.transaction_stream_amount import TransactionStreamAmount
from plaid_skel.models.transaction_stream_status import TransactionStreamStatus




class TransactionStream(BaseModel):
    """A grouping of related transactions"""


    account_id: str = Field( description="The ID of the account to which the stream belongs")
    stream_id: str = Field( description="A unique id for the stream")
    category: List[str] = Field( description="A hierarchical array of the categories to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).")
    category_id: str = Field( description="The ID of the category to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).")
    description: str = Field( description="A description of the transaction stream.")
    merchant_name: Optional[str] = Field(default=None, description="The merchant associated with the transaction stream.")
    first_date: date_ = Field( description="The posted date of the earliest transaction in the stream.")
    last_date: date_ = Field( description="The posted date of the latest transaction in the stream.")
    frequency: RecurringTransactionFrequency = Field()
    transaction_ids: List[str] = Field( description="An array of Plaid transaction IDs belonging to the stream, sorted by posted date.")
    average_amount: TransactionStreamAmount = Field()
    last_amount: TransactionStreamAmount = Field()
    is_active: bool = Field( description="Indicates whether the transaction stream is still live.")
    status: TransactionStreamStatus = Field()
    personal_finance_category: Optional[PersonalFinanceCategory] = Field(default=None,)

TransactionStream.update_forward_refs()
