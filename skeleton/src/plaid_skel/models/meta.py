# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date as date_  # noqa: F401
from datetime import datetime as datetime_  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import field_validator, AnyUrl, BaseModel, EmailStr, Field  # noqa: F401




class Meta(BaseModel):
    """Allows specifying the metadata of the test account"""


    name: str = Field( description="The account's name")
    official_name: str = Field( description="The account's official name")
    limit: float = Field( description="The account's limit")
    mask: str = Field( description="The account's mask. Should be a string of 2-4 alphanumeric characters. This allows you to model a mask which does not match the account number (such as with a virtual account number).")

    @field_validator("mask")
    @classmethod
    def mask_min_length(cls, value):
        assert len(value) >= 2
        return value

    @field_validator("mask")
    @classmethod
    def mask_max_length(cls, value):
        assert len(value) <= 4
        return value

    @field_validator("mask")
    @classmethod
    def mask_pattern(cls, value):
        assert value is not None and re.match(r"^[A-Za-z0-9]{2,4}$", value)
        return value

Meta.update_forward_refs()
