# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date as date_  # noqa: F401
from datetime import datetime as datetime_  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from plaid_skel.models.plaid_error import PlaidError
from plaid_skel.models.products import Products




class Item(BaseModel):
    """Metadata about the Item."""


    item_id: str = Field( description="The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.")
    institution_id: Optional[str] = Field(default=None, description="The Plaid Institution ID associated with the Item. Field is `null` for Items created via Same Day Micro-deposits.")
    webhook: Optional[str] = Field(default=None, description="The URL registered to receive webhooks for the Item.")
    error: Optional[PlaidError] = Field(default=None,)
    available_products: List[Products] = Field( description="A list of products available for the Item that have not yet been accessed. The contents of this array will be mutually exclusive with `billed_products`.")
    billed_products: List[Products] = Field( description="A list of products that have been billed for the Item. The contents of this array will be mutually exclusive with `available_products`. Note - `billed_products` is populated in all environments but only requests in Production are billed. Also note that products that are billed on a pay-per-call basis rather than a pay-per-Item basis, such as `balance`, will not appear here. ")
    products: Optional[List[Products]] = Field(default=None, description="A list of authorized products for the Item. ")
    consented_products: Optional[List[Products]] = Field(default=None, description="Beta: A list of products that have gone through consent collection for the Item. Only present for those enabled in the beta. ")

Item.update_forward_refs()
