# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic.v1 import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from plaid_skel.models.identity_match_request_options import IdentityMatchRequestOptions
from plaid_skel.models.identity_match_user import IdentityMatchUser




class IdentityMatchRequest(BaseModel):
    """IdentityMatchRequest defines the request schema for `/identity/match`"""


    client_id: Optional[str] = Field(default=None, description="Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.")
    secret: Optional[str] = Field(default=None, description="Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.")
    access_token: str = Field( description="The access token associated with the Item data is being requested for.")
    user: Optional[IdentityMatchUser] = Field(default=None,)
    identity_verification_id: Optional[str] = Field(default=None, description="ID of the associated Identity Verification attempt. This field can be used instead of `user` to perform fuzzy match against the data collected during identity verification.")
    options: Optional[IdentityMatchRequestOptions] = Field(default=None,)

IdentityMatchRequest.update_forward_refs()
