# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date as date_  # noqa: F401
from datetime import datetime as datetime_  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from plaid_skel.models.account_subtype import AccountSubtype
from plaid_skel.models.holdings_override import HoldingsOverride
from plaid_skel.models.income_override import IncomeOverride
from plaid_skel.models.inflow_model import InflowModel
from plaid_skel.models.investments_transactions_override import InvestmentsTransactionsOverride
from plaid_skel.models.liability_override import LiabilityOverride
from plaid_skel.models.meta import Meta
from plaid_skel.models.numbers import Numbers
from plaid_skel.models.override_account_type import OverrideAccountType
from plaid_skel.models.owner_override import OwnerOverride
from plaid_skel.models.transaction_override import TransactionOverride




class OverrideAccounts(BaseModel):
    """Data to use to set values of test accounts. Some values cannot be specified in the schema and will instead will be calculated from other test data in order to achieve more consistent, realistic test data."""


    type: OverrideAccountType = Field()
    subtype: Optional[AccountSubtype] = Field(default=None,)
    starting_balance: float = Field( description="If provided, the account will start with this amount as the current balance. ")
    force_available_balance: float = Field( description="If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time.")
    currency: str = Field( description="ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default.")
    meta: Meta = Field()
    numbers: Numbers = Field()
    transactions: List[TransactionOverride] = Field( description="Specify the list of transactions on the account.")
    holdings: Optional[HoldingsOverride] = Field(default=None,)
    investment_transactions: Optional[InvestmentsTransactionsOverride] = Field(default=None,)
    identity: OwnerOverride = Field()
    liability: LiabilityOverride = Field()
    inflow_model: InflowModel = Field()
    income: Optional[IncomeOverride] = Field(default=None,)

OverrideAccounts.update_forward_refs()
