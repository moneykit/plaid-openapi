# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from plaid_skel.models.transactions_sync_request_options import TransactionsSyncRequestOptions




class TransactionsSyncRequest(BaseModel):
    """TransactionsSyncRequest defines the request schema for `/transactions/sync`"""


    client_id: Optional[str] = Field(default=None, description="Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.")
    access_token: str = Field( description="The access token associated with the Item data is being requested for.")
    secret: Optional[str] = Field(default=None, description="Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.")
    cursor: Optional[str] = Field(default=None, description="The cursor value represents the last update requested. Providing it will cause the response to only return changes after this update. If omitted, the entire history of updates will be returned, starting with the first-added transactions on the item. Note: The upper-bound length of this cursor is 256 characters of base64.")
    count: Optional[int] = Field(default=None, description="The number of transaction updates to fetch.")
    options: Optional[TransactionsSyncRequestOptions] = Field(default=None,)

    @validator("count")
    def count_max(cls, value):
        assert value <= 500
        return value

    @validator("count")
    def count_min(cls, value):
        assert value >= 1
        return value

TransactionsSyncRequest.update_forward_refs()
