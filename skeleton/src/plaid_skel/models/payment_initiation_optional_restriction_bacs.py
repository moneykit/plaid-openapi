# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401




class PaymentInitiationOptionalRestrictionBacs(BaseModel):
    """An optional object used to restrict the accounts used for payments. If provided, the end user will be able to send payments only from the specified bank account."""

    class Config:
        schema_extra = {
            "externalDocs": {
                "url": "https://plaid.com/docs/api/accounts/#payment_initiation_optional_restriction_bacs"
            }
            , "nullable": True,
        }

    account: Optional[str] = Field(default=None, description="The account number of the account. Maximum of 10 characters.")
    sort_code: Optional[str] = Field(default=None, description="The 6-character sort code of the account.")

    @validator("account")
    def account_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("account")
    def account_max_length(cls, value):
        assert len(value) <= 10
        return value

    @validator("sort_code")
    def sort_code_min_length(cls, value):
        assert len(value) >= 6
        return value

    @validator("sort_code")
    def sort_code_max_length(cls, value):
        assert len(value) <= 6
        return value

PaymentInitiationOptionalRestrictionBacs.update_forward_refs()
