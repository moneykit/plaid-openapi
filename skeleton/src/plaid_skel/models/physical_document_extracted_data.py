# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic.v1 import field_validator, ConfigDict, AnyUrl, BaseModel, EmailStr, Field  # noqa: F401
from plaid_skel.models.physical_document_category import PhysicalDocumentCategory




class PhysicalDocumentExtractedData(BaseModel):
    """Data extracted from a user-submitted document."""
    model_config = ConfigDict(json_schema_extra={"nullable": True})

    id_number: Optional[str] = Field(default=None, description="Alpha-numeric ID number extracted via OCR from the user's document image.")
    category: PhysicalDocumentCategory = Field()
    expiration_date: Optional[date] = Field(default=None, description="A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).")
    issuing_country: str = Field( description="Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.")
    issuing_region: Optional[str] = Field(default=None, description="An ISO 3166-2 subdivision code. Related terms would be \"state\", \"province\", \"prefecture\", \"zone\", \"subdivision\", etc.")

    @field_validator("issuing_country")
    @classmethod
    def issuing_country_min_length(cls, value):
        assert len(value) >= 2
        return value

PhysicalDocumentExtractedData.update_forward_refs()
