# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic.v1 import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from plaid_skel.models.removed_transaction import RemovedTransaction
from plaid_skel.models.transaction import Transaction




class TransactionsSyncResponse(BaseModel):
    """TransactionsSyncResponse defines the response schema for `/transactions/sync`"""


    added: List[Transaction] = Field( description="Transactions that have been added to the Item since `cursor` ordered by ascending last modified time.")
    modified: List[Transaction] = Field( description="Transactions that have been modified on the Item since `cursor` ordered by ascending last modified time.")
    removed: List[RemovedTransaction] = Field( description="Transactions that have been removed from the Item since `cursor` ordered by ascending last modified time.")
    next_cursor: str = Field( description="Cursor used for fetching any future updates after the latest update provided in this response. The cursor obtained after all pages have been pulled (indicated by `has_more` being `false`) will be valid for at least 1 year. This cursor should be persisted for later calls. If transactions are not yet available, this will be an empty string.")
    has_more: bool = Field( description="Represents if more than requested count of transaction updates exist. If true, the additional updates can be fetched by making an additional request with `cursor` set to `next_cursor`. If `has_more` is true, itâ€™s important to pull all available pages, to make it less likely for underlying data changes to conflict with pagination.")
    request_id: str = Field( description="A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.")

TransactionsSyncResponse.update_forward_refs()
