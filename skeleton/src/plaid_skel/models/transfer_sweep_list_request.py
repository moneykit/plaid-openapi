# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import field_validator, AnyUrl, BaseModel, EmailStr, Field  # noqa: F401




class TransferSweepListRequest(BaseModel):
    """Defines the request schema for `/transfer/sweep/list`"""


    client_id: Optional[str] = Field(default=None, description="Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.")
    secret: Optional[str] = Field(default=None, description="Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.")
    start_date: Optional[datetime] = Field(default=None, description="The start datetime of sweeps to return (RFC 3339 format).")
    end_date: Optional[datetime] = Field(default=None, description="The end datetime of sweeps to return (RFC 3339 format).")
    count: Optional[int] = Field(default=None, description="The maximum number of sweeps to return.")
    offset: Optional[int] = Field(default=None, description="The number of sweeps to skip before returning results.")
    originator_client_id: Optional[str] = Field(default=None, description="Filter sweeps to only those with the specified originator client.")
    funding_account_id: Optional[str] = Field(default=None, description="Filter sweeps to only those with the specified `funding_account_id`.")

    @field_validator("count")
    @classmethod
    def count_max(cls, value):
        assert value <= 25
        return value

    @field_validator("count")
    @classmethod
    def count_min(cls, value):
        assert value >= 1
        return value

    @field_validator("offset")
    @classmethod
    def offset_min(cls, value):
        assert value >= 0
        return value

TransferSweepListRequest.update_forward_refs()
