# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from plaid_skel.models.bank_transfer_direction import BankTransferDirection
from plaid_skel.models.bank_transfer_event_type import BankTransferEventType
from plaid_skel.models.bank_transfer_failure import BankTransferFailure
from plaid_skel.models.bank_transfer_type import BankTransferType




class BankTransferEvent(BaseModel):
    """Represents an event in the Bank Transfers API."""


    event_id: int = Field( description="Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers.")
    timestamp: datetime = Field( description="The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.")
    event_type: BankTransferEventType = Field()
    account_id: str = Field( description="The account ID associated with the bank transfer.")
    bank_transfer_id: str = Field( description="Plaid’s unique identifier for a bank transfer.")
    origination_account_id: Optional[str] = Field(default=None, description="The ID of the origination account that this balance belongs to.")
    bank_transfer_type: BankTransferType = Field()
    bank_transfer_amount: str = Field( description="The bank transfer amount.")
    bank_transfer_iso_currency_code: str = Field( description="The currency of the bank transfer amount.")
    failure_reason: Optional[BankTransferFailure] = Field(default=None,)
    direction: Optional[BankTransferDirection] = Field(default=None,)

    @validator("event_id")
    def event_id_min(cls, value):
        assert value >= 0
        return value

BankTransferEvent.update_forward_refs()
