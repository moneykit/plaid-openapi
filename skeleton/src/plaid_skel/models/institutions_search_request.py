# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date as date_  # noqa: F401
from datetime import datetime as datetime_  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import field_validator, AnyUrl, BaseModel, EmailStr, Field  # noqa: F401
from plaid_skel.models.country_code import CountryCode
from plaid_skel.models.institutions_search_request_options import InstitutionsSearchRequestOptions
from plaid_skel.models.products import Products




class InstitutionsSearchRequest(BaseModel):
    """InstitutionsSearchRequest defines the request schema for `/institutions/search`"""


    client_id: Optional[str] = Field(default=None, description="Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.")
    secret: Optional[str] = Field(default=None, description="Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.")
    query: str = Field( description="The search query. Institutions with names matching the query are returned")
    products: Optional[List[Products]] = Field(default=None, description="Filter the Institutions based on whether they support all products listed in `products`. Provide `null` to get institutions regardless of supported products. Note that when `auth` is specified as a product, if you are enabled for Instant Match or Automated Micro-deposits, institutions that support those products will be returned even if `auth` is not present in their product array.")
    country_codes: List[CountryCode] = Field( description="Specify an array of Plaid-supported country codes this institution supports, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied. ")
    options: Optional[InstitutionsSearchRequestOptions] = Field(default=None,)

    @field_validator("query")
    @classmethod
    def query_min_length(cls, value):
        assert len(value) >= 1
        return value

InstitutionsSearchRequest.update_forward_refs()
