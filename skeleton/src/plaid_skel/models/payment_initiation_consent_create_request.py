# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from plaid_skel.models.external_payment_initiation_consent_options import ExternalPaymentInitiationConsentOptions
from plaid_skel.models.payment_initiation_consent_constraints import PaymentInitiationConsentConstraints
from plaid_skel.models.payment_initiation_consent_scope import PaymentInitiationConsentScope




class PaymentInitiationConsentCreateRequest(BaseModel):
    """PaymentInitiationConsentCreateRequest defines the request schema for `/payment_initiation/consent/create`"""

    class Config:
        schema_extra = {
            "externalDocs": {
                "url": "https://plaid.com/docs/api/accounts/#payment_initiation_consent_create_request"
            }
        }

    client_id: Optional[str] = Field(default=None, description="Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.")
    secret: Optional[str] = Field(default=None, description="Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.")
    recipient_id: str = Field( description="The ID of the recipient the payment consent is for. The created consent can be used to transfer funds to this recipient only.")
    reference: str = Field( description="A reference for the payment consent. This must be an alphanumeric string with at most 18 characters and must not contain any special characters.")
    scopes: list[PaymentInitiationConsentScope] = Field( description="An array of payment consent scopes.")
    constraints: PaymentInitiationConsentConstraints = Field()
    options: Optional[ExternalPaymentInitiationConsentOptions] = Field(default=None,)

    @validator("reference")
    def reference_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("reference")
    def reference_max_length(cls, value):
        assert len(value) <= 18
        return value

PaymentInitiationConsentCreateRequest.update_forward_refs()
