# coding: utf-8
# AUTOGENERATED with MDM customization.  Do not edit.




from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from plaid_skel.models.watchlist_screening_audit_trail import WatchlistScreeningAuditTrail




class EntityWatchlistScreeningReview(BaseModel):
    """A review submitted by a team member for an entity watchlist screening. A review can be either a comment on the current screening state, actions taken against hits attached to the watchlist screening, or both."""

    class Config:
        schema_extra = {
            "externalDocs": {
                "url": "https://plaid.com/docs/api/accounts/#entity_watchlist_screening_review"
            }
        }

    id: str = Field( description="ID of the associated entity review.")
    confirmed_hits: List[str] = Field( description="Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected.")
    dismissed_hits: List[str] = Field( description="Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed.")
    comment: Optional[str] = Field(default=None, description="A comment submitted by a team member as part of reviewing a watchlist screening.")
    audit_trail: WatchlistScreeningAuditTrail = Field()

    @validator("comment")
    def comment_min_length(cls, value):
        assert len(value) >= 1
        return value

EntityWatchlistScreeningReview.update_forward_refs()
